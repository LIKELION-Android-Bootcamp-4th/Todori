package com.mukmuk.todori.ui.screen.home

import android.os.Build
import androidx.annotation.RequiresApi
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.Pause
import androidx.compose.material.icons.rounded.PlayArrow
import androidx.compose.material.icons.rounded.Refresh
import androidx.compose.material.icons.rounded.Settings
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavHostController
import com.mukmuk.todori.data.remote.todo.Todo
import com.mukmuk.todori.ui.screen.home.components.MainTodoItemEditableRow
import com.mukmuk.todori.ui.screen.home.components.PomoModeTextBox
import com.mukmuk.todori.ui.theme.AppTextStyle
import com.mukmuk.todori.ui.theme.Background
import com.mukmuk.todori.ui.theme.Black
import com.mukmuk.todori.ui.theme.Dimens
import com.mukmuk.todori.ui.theme.Gray
import kotlinx.coroutines.delay
import java.util.concurrent.TimeUnit

@RequiresApi(Build.VERSION_CODES.O)
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(navController: NavHostController) {
    val viewModel: HomeViewModel = hiltViewModel()
    val state by viewModel.state.collectAsState()
    val homeSettingState by viewModel.state.collectAsState()

    var selectedIndex by remember { mutableStateOf(-1) }
    var recordTime by remember { mutableStateOf(0L) }
    var recordButtonText by remember { mutableStateOf("Í∏∞Î°ù") }
    val todos = remember {
        mutableStateListOf(
            Todo(title = "Ïä§Ìä∏Î†àÏπ≠ ÌïòÍ∏∞", completed = true),
            Todo(title = "Ïä§ÏøºÌä∏ 50Í∞ú", completed = false),
            Todo(title = "Îü∞Îãù 30Î∂Ñ", completed = true),
            Todo(title = "Kotlin Î¨∏Î≤ï Ï†ïÎ¶¨", completed = false),
            Todo(title = "Coroutine Î≥µÏäµ", completed = true),
            Todo(title = "Jetpack Compose", completed = false),
            Todo(title = "10Î∂Ñ Î™ÖÏÉÅ", completed = true),
            Todo(title = "Í∞êÏÇ¨ ÏùºÍ∏∞ ÏûëÏÑ±", completed = false),
            Todo(title = "Ï∞®Î∂ÑÌïú ÏùåÏïÖ Îì£Í∏∞", completed = true)
        )
    }

    LaunchedEffect(state.status == TimerStatus.RECORDING) {
        if (state.status != TimerStatus.RECORDING) {
            delay(100L)
            selectedIndex = -1
            recordButtonText = "Í∏∞Î°ù"
        } else {
            recordButtonText = "Ï∑®ÏÜå"
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { },
                colors = TopAppBarDefaults.topAppBarColors(Background),
                actions = {
                    IconButton(onClick = {
                        // ÏÑ§Ï†ï ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô.
                        // ÏÑ§Ï†ï Í∞íÏùÄ DataStoreÎ•º ÌÜµÌï¥ ÏûêÎèôÏúºÎ°ú Ï†ÑÎã¨ÎêòÎØÄÎ°ú, ViewModelÏóê stop Ïù¥Î≤§Ìä∏Îßå Î≥¥ÎÉÖÎãàÎã§.
                        navController.navigate("home_setting")
                        viewModel.onEvent(TimerEvent.Stop) // ÌÉÄÏù¥Î®∏ Î©àÏ∂§
                    }) {
                        Icon(
                            imageVector = Icons.Rounded.Settings,
                            contentDescription = "Timer Setting",
                        )
                    }
                }
            )
        }

    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "ÎàÑÏ†Å Í≥µÎ∂Ä ÏãúÍ∞Ñ",
                    style = AppTextStyle.BodyLarge
                )
            }
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = totalFormatTime(state.totalStudyTimeMills),
                    style = AppTextStyle.Timer,
                    textAlign = TextAlign.Center
                )
            }
            // ÎΩÄÎ™®ÎèÑÎ°ú ÌôúÏÑ±Ìôî Ïó¨Î∂ÄÎ•º homeSettingStateÏóêÏÑú Í∞ÄÏ†∏ÏòµÎãàÎã§.
            if (homeSettingState.isPomodoroEnabled) { // üöÄ homeSettingState.isPomodoroEnabled ÏÇ¨Ïö©
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    PomoModeTextBox(state.pomodoroMode)
                    Spacer(modifier = Modifier.width(Dimens.Large))
                    Text(
                        // ÌÉÄÏù¥Î®∏Ïùò ÎÇ®ÏùÄ ÏãúÍ∞ÑÏùÄ ViewModelÏùò stateÏóêÏÑú Í∞ÄÏ†∏ÏòµÎãàÎã§.
                        text = pomodoroFormatTime(state.timeLeftInMillis),
                        style = AppTextStyle.TitleLarge,
                        textAlign = TextAlign.Center
                    )
                    Spacer(modifier = Modifier.width(Dimens.Large))
                    IconButton(
                        onClick = { viewModel.onEvent(TimerEvent.Reset) }
                    ) {
                        Icon(
                            imageVector = Icons.Rounded.Refresh,
                            contentDescription = "Timer Reset"
                        )
                    }

                }
            }
            Spacer(modifier = Modifier.height(Dimens.XXLarge))
            Row {
                Button(
                    onClick = {
                        if (state.status == TimerStatus.RUNNING) {
                            viewModel.onEvent(TimerEvent.Record)
                            // recordTime Í≥ÑÏÇ∞ÏùÄ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
                            recordTime = state.totalStudyTimeMills - state.totalRecordTimeMills
                        } else {
                            viewModel.onEvent(TimerEvent.Stop)
                        }
                    },
                    modifier = Modifier.size(76.dp),
                    contentPadding = PaddingValues(0.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Gray,
                        contentColor = Black
                    ),
                    shape = CircleShape
                ) {
                    Text(text = recordButtonText, style = AppTextStyle.TitleSmall)
                }
                Spacer(modifier = Modifier.width(Dimens.XXLarge))
                if (state.status == TimerStatus.RUNNING) {
                    Button(
                        onClick = { viewModel.onEvent(TimerEvent.Stop) },
                        shape = CircleShape,
                        modifier = Modifier.size(76.dp),
                        contentPadding = PaddingValues(0.dp),
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF22B282)) // ÏòàÏãú ÏÉâÏÉÅ
                    ) {
                        Icon(
                            imageVector = Icons.Rounded.Pause,
                            contentDescription = "Time Start",
                            modifier = Modifier.size(50.dp),
                            tint = Color.White
                        )
                    }
                } else {
                    Button(
                        onClick = {
                            viewModel.onEvent(TimerEvent.Start)
                            if (state.status == TimerStatus.RECORDING) viewModel.onEvent(TimerEvent.Stop)
                        },
                        shape = CircleShape,
                        modifier = Modifier.size(76.dp),
                        contentPadding = PaddingValues(0.dp),
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF22B282)) // ÏòàÏãú ÏÉâÏÉÅ
                    ) {
                        Icon(
                            imageVector = Icons.Rounded.PlayArrow,
                            contentDescription = "Time Start",
                            modifier = Modifier.size(50.dp),
                            tint = Color.White
                        )
                    }
                }

                Spacer(modifier = Modifier.width(Dimens.XXLarge))

                Button(
                    onClick = {
                        if (state.status == TimerStatus.RECORDING) viewModel.onEvent(TimerEvent.Stop)
                    },
                    modifier = Modifier.size(76.dp),
                    contentPadding = PaddingValues(0.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Gray,
                        contentColor = Black
                    ),
                    shape = CircleShape
                ) {
                    Text(text = "Ï∂îÍ∞Ä", style = AppTextStyle.TitleSmall)
                }
            }
            Spacer(modifier = Modifier.height(Dimens.XXLarge))
            Spacer(
                modifier = Modifier
                    .height(1.dp)
                    .fillMaxWidth()
                    .background(Gray)
            )
            Spacer(modifier = Modifier.height(Dimens.XXLarge))
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = Dimens.Medium),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                LazyColumn {
                    itemsIndexed(todos) { index, todo ->
                        MainTodoItemEditableRow(
                            title = todo.title,
                            isDone = todo.completed,
                            isRecordMode = state.status == TimerStatus.RECORDING,
                            recordTime = if (todo.totalFocusTimeMillis > 0L) {
                                totalFormatTime(todo.totalFocusTimeMillis)
                            } else {
                                null
                            },
                            onCheckedChange = { checked ->
                                todos[index] = todo.copy(completed = checked)
                            },
                            onItemClick = {
                                if (state.status == TimerStatus.RECORDING && !todo.completed) {
                                    selectedIndex = index
                                    if (todos[index].totalFocusTimeMillis > 0L) {
                                        todos[index] = todo.copy(totalFocusTimeMillis = todos[index].totalFocusTimeMillis + recordTime)
                                    } else {
                                        todos[index] = todo.copy(totalFocusTimeMillis = recordTime)
                                    }
                                    viewModel.setTotalRecordTimeMills(recordTime)
                                    viewModel.onEvent(TimerEvent.Stop)
                                }
                            }
                        )
                        Spacer(modifier = Modifier.height(Dimens.Medium))
                    }
                }
            }
        }
    }
}


fun pomodoroFormatTime(millis: Long): String {
    val minutes = TimeUnit.MILLISECONDS.toMinutes(millis)
    val seconds = TimeUnit.MILLISECONDS.toSeconds(millis) % 60
    return String.format("%02d : %02d", minutes, seconds)
}

fun totalFormatTime(millis: Long): String {
    val hours = TimeUnit.MILLISECONDS.toHours((millis))
    val minutes = TimeUnit.MILLISECONDS.toMinutes(millis) % 60 // 60Î∂Ñ Ïù¥ÏÉÅÏùº Í≤ΩÏö∞Î•º ÏúÑÌï¥ % 60 Ï∂îÍ∞Ä
    val seconds = TimeUnit.MILLISECONDS.toSeconds(millis) % 60
    return String.format("%02d : %02d : %02d", hours, minutes, seconds)
}